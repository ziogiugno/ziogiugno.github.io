{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/test-e-2-e-consigli-per-novizi-come-me","result":{"data":{"post":{"__typename":"MdxPost","slug":"/test-e-2-e-consigli-per-novizi-come-me","title":"Test e2e - consigli per novizi ( come me )","date":"05.04.2020","tags":null,"description":"I test e2e sono preconfigurati nel vostro progetto angular/ionc... ma funzionano?","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Test e2e - consigli per novizi ( come me )\",\n  \"description\": \"I test e2e sono preconfigurati nel vostro progetto angular/ionc... ma funzionano?\",\n  \"date\": \"2020-04-05T00:00:00.000Z\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Allora abbiamo il nostro bel progetto Angular o Ionic e un bel giorno decidiamo che \\xE8 cosa buona e giusta eseguire dei test e2e ( che in parole povere sono test di integrazione ).\\nApriamo la nostra bella shell e lanciamo fiduciosi il comando \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ng e2e\"), \" e...\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"ng e2e events.js:187 throw er; // Unhandled 'error' event....\")), mdx(\"p\", null, \"Il problema \\xE8 che nessuno ci ha detto che il setup non \\xE8 completo, i test e2e si basano su protractor che v\\xE0 installato:\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm i -g protractor\")), mdx(\"p\", null, \"ma non lasciatevi prendere da facili entusiasmi, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ng e2e\"), \" fallisce di nuovo...\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Error: connect ETIMEDOUT...\")), mdx(\"p\", null, \"Anche qui dovevate sapere che protractor usa selenium e i suoi webdriver per simulare un vero browser ( Chrome di default ) e che i driver se non li hai in locale il driver-manager cerca di scaricarli da internet o di aggiornarli, ma se sei in azienda con un bel proxy l'update non funziona. Puoi sempre aggiungere l'opzione \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"--webdriver-update=false\"), \" al comando ng e2e ma solo se almeno una volta il benedetto driver te lo sei scaricato e installato. Procedi quindi fiducioso e tenti l'aggiornamento dei driver con \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"webdriver-manager update\"), \" ma ancora non ci siamo...\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Error: connect ETIMEDOUT...\")), mdx(\"p\", null, \"Forniamo quindi al nostro webdriver-manager le giuste info sul proxy \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"webdriver-manager update --proxy=http://proxy.server.host:port\"), \" e... \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"BINGO!\"), \"\\nFinalmente abbiamo protractor e i driver, procediamo con \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ng e2e --webdriver-update=false\"), \"... ma niente da fare. Googoliamo ancora un p\\xF2 per scoprire che i driver che abbiamo aggiornato in realta sono package globali ( cos\\xEC come l'installazione di protractor ), mentre il progetto ha gi\\xE0 protractor come dipendenza ( questo l'avrei potuto scoprire fin da subito guardando il package.json ), ma necessita dei webdriver come package locali. Per fare questo oramai s\\xF2 tutto e posso mettere uno script nel package.json per consentire a tutti i colleghi che lavorano sul progetto di procedere all' aggiornamento. Ora che il mio package.json contiene la riga\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"webdriver-update\\\": \\\"webdriver-manager update --proxy=http://proxy.server.host:port\\\"\"), mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"posso eseguire l'aggiornamento e finalmente concentrarmi a scrivere i miei test di integrazione.\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Allora abbiamo il nostro bel progetto Angular o Ionic e un bel giorno decidiamo che è cosa buona e giusta eseguire dei test e2e ( che in…","timeToRead":1,"banner":null}},"pageContext":{"slug":"/test-e-2-e-consigli-per-novizi-come-me","formatString":"DD.MM.YYYY"}}}